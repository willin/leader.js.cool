__NUXT_JSONP__("/basic/knowledge/git", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A){return {data:[{document:{slug:u,description:"",title:"Git",position:1203,category:"知识篇-基础知识",toc:[{id:r,depth:v,text:r},{id:w,depth:v,text:x}],body:{type:"root",children:[{type:b,tag:y,props:{id:r},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%E7%89%88%E6%9C%AC%E5%BA%93",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Git 通常有两种方式来进行初始化:"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-clone"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-clone",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git clone:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"这是较为简单的一种初始化方式，当你已经有一个远程的 Git 版本库，只需要在本地克隆一份"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:z}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,q]},children:[{type:b,tag:p,props:{},children:[{type:a,value:"$ git clone git:\u002F\u002Fgithub.com\u002Fsomeone\u002Fsome_project.git  some_project\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"上面的命令就是将'git:\u002F\u002Fgithub.com\u002Fsomeone\u002Fsome_project.git'这个 URL 地址的远程版本库完全克隆到本地 some_project 目录下面,\n如果想要设置自己的 git 配置,就 git init 初始化.git 文件.创建自己的版本库,也可以 git branch new_branch 创建自己的分支."}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,q]},children:[{type:b,tag:p,props:{},children:[{type:a,value:"$ git remote add origin git:\u002F\u002Fgithub.com\u002Fsomeone\u002Fsome_project.git\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"设置远程服务器别名为 origin,这样将代码提交的时候就可以执行以下命令:"}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,q]},children:[{type:b,tag:p,props:{},children:[{type:a,value:"$ git push origin #将代码提交到origin的master上面(默认)\n"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-init-和-git-remote"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-init-%E5%92%8C-git-remote",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git init 和 git remote："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"这种初始化方式稍微复杂一些"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:z}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,q]},children:[{type:b,tag:p,props:{},children:[{type:a,value:"$ mkdir [yourworkname] #本地创建一个工作目录\n$ cd [yourworkname] #进入这个目录\n$ git init #初始化版本库,即生成.git,就会对该目录下的文件进行版本控制\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Git 以后，你会看到目录下面自动生成.git 文件,用于版本管理使用(非常重要的文件,不要轻易改动),这时候如果你需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的 URL 记录下来，此时你就可以利用'git remote add'命令来增加一个远程服务器端，"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"例如："}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,q]},children:[{type:b,tag:p,props:{},children:[{type:a,value:"$ git remote add origin git:\u002F\u002Fgithub.com\u002Fsomeone\u002Fanother_project.git\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"上面的命令就会增加 URL 地址为'git: \u002F\u002Fgithub.com\u002Fsomeone\u002Fanother_project.git'，名称为 origin 的远程服务器，以后提交代码的时候只需要使用 origin 别名即可"}]},{type:a,value:c},{type:b,tag:"adsbygoogle",props:{},children:[{type:a,value:c}]},{type:a,value:c},{type:b,tag:y,props:{id:w},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"现在我们有了本地和远程的版本库，让我们来试着用用 Git 的基本命令："}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-pull"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-pull",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git pull："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：'git pull origin master'就是将 origin 这个版本库的代码更新到本地的 master 主枝，该功能类似于 SVN 的 update"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-add"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-add",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git add："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"是 将当前更改或者新增的文件加入到 Git 的索引中，加入到 Git 的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如'git add app\u002Fmodel\u002Fuser.rb'就会增加 app\u002Fmodel\u002Fuser.rb 文件到 Git 的索引中，也可以使用 git add .来加入当前工作空间所有修改过或者新增的文件."}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-rm"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-rm",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git rm："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"从当前的工作空间中和索引中删除文件，例如'git rm app\u002Fmodel\u002Fuser.rb'，该功能类似于 SVN 的 rm、del"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-commit"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-commit",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git commit："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"提交当前工作空间的修改内容，类似于 SVN 的 commit 命令，例如'git commit -m story #3, add user model'，提交的时候必须用-m 来输入一条提交信息，该功能类似于 SVN 的 commit"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-push"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-push",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git push："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"将本地 commit 的代码更新到远程版本库中，例如'git push origin'就会将本地的代码更新到名为 orgin 的远程版本库中"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-log"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-log",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git log："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"查看历史日志，该功能类似于 SVN 的 log"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-revert"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-revert",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git revert："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"还原一个版本的修改，必须提供一个具体的 Git 版本号，例如'git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20'，Git 的版本号都是生成的一个哈希值"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-branch"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-branch",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git branch："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"对分支的增、删、查等操作，例如'git branch new_branch'会从当前的工作版本创建一个叫做 new_branch 的新分支，'git branch -D new_branch'就会强制删除叫做 new_branch 的分支，'git branch'就会列出本地所有的分支"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-checkout"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-checkout",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git checkout："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Git 的 checkout 有两个作用，其一是在不同的 branch 之间进行切换，例如'git checkout new_branch'就会切换到 new_branch 的分支上去；另一个功能是还原代码的作用，例如'git checkout app\u002Fmodel\u002Fuser.rb'就会将 user.rb 文件从上一个已提交的版本中更新回来，未提交的内容全部会回滚"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-rebase"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-rebase",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git rebase："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"用下面两幅图解释会比较清楚一些，rebase 命令执行后，实际上是将分支点从 C 移到了 G，这样分支也就具有了从 C 到 G 的功能"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:s,props:{alt:s,src:"\u002Fbasic\u002Fgit\u002Frebase.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-reset"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-reset",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git reset："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"将当前的工作目录完全回滚到指定的版本号，假设如下图，我们有 A-G 五次提交的版本，其中 C 的版本号是 bbaf6fb5060b4875b18ff9ff637ce118256d6f20，我们执行了'git reset bbaf6fb5060b4875b18ff9ff637ce118256d6f20'那么结果就只剩下了 A-C 三个提交的版本"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:s,props:{alt:s,src:"\u002Fbasic\u002Fgit\u002Freset.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:"ol",props:{},children:[{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Git 允许我们在版本的历史之间穿梭，使用命令 git reset --hard commit_id。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"穿梭前，用 git log 可以查看提交历史，以便确定要回退到哪个版本。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"要重返未来，用 git reflog 查看命令历史，以便确定要回到未来的哪个版本。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-stash"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-stash",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git stash："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"将当前未提交的工作存入 Git 工作栈中，时机成熟的时候再应用回来，这里暂时提一下这个命令的用法，后面在技巧篇会重点讲解"}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-config"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-config",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git config："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"利用这个命令可以新增、更改 Git 的各种设置，例如'git config branch.master.remote origin'就将 master 的远程版本库设置为别名叫做 origin 版本库，后面在技巧篇会利用这个命令个性化设置你的 Git，为你打造独一无二的 Git"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"设置默认分支："}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,"language-bash"]},children:[{type:b,tag:p,props:{},children:[{type:b,tag:e,props:{className:["token","function"]},children:[{type:a,value:u}]},{type:a,value:" config --global init.defaultBranch main\n"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{id:"git-tag"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#git-tag",tabIndex:h},children:[{type:b,tag:e,props:{className:[i,j]},children:[]}]},{type:a,value:"git tag："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了，例如你可以使用'git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20'来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version 标签名，而不是哈希值了"}]}]},dir:"\u002Fzh\u002Fbasic\u002Fknowledge",path:"\u002Fzh\u002Fbasic\u002Fknowledge\u002Fgit",extension:".md",createdAt:A,updatedAt:A,to:"\u002Fbasic\u002Fknowledge\u002Fgit"},prev:{title:"常用SHELL命令",path:"\u002Fzh\u002Fbasic\u002Fknowledge\u002Fshell",to:"\u002Fbasic\u002Fknowledge\u002Fshell"},next:{title:"Promise 思想",path:"\u002Fzh\u002Fbasic\u002Fknowledge\u002Fpromise",to:"\u002Fbasic\u002Fknowledge\u002Fpromise"}}],fetch:{},mutations:[]}}("text","element","\n","p","span","a","true",-1,"icon","icon-link","h4","div","nuxt-content-highlight","pre","line-numbers","code","language-text","初始化版本库","img","li","git",2,"git-的基本命令","Git 的基本命令","h2","例如:","2021-11-24T07:16:24.316Z")));